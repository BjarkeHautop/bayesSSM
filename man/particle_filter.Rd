% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/particle_filter.R
\name{particle_filter}
\alias{particle_filter}
\title{Particle Filter Implementation}
\usage{
particle_filter(
  y,
  n,
  init_fn,
  transition_fn,
  likelihood_fn,
  algorithm = c("SISAR", "SISR", "SIS"),
  resample_fn = c("stratified", "systematic", "multinomial"),
  threshold = NULL,
  return_particles = TRUE,
  ...
)
}
\arguments{
\item{y}{A numeric vector of observations.}

\item{n}{An integer specifying the number of particles. Must be positive.}

\item{init_fn}{A function that initializes the particle states. It should
accept an integer (the number of particles) as its first argument and return
a vector or matrix of initial particle states.}

\item{transition_fn}{A function describing the state transition model.
It should take the current particles and the current time step as
arguments, and return the propagated particles.}

\item{likelihood_fn}{A function that computes the likelihood weights for the
particles. It should accept an observation, the current particles, and the
current time step as arguments.}

\item{algorithm}{A character string specifying the particle filtering
algorithm to use. Options are:
\describe{
  \item{"SIS"}{Sequential Importance Sampling (without resampling).}
  \item{"SISR"}{Sequential Importance Sampling with resampling at every
  time step.}
  \item{"SISAR"}{SIS with adaptive resampling based on Effective Sample
  Size (ESS).}
}
The default is \code{"SISAR"}.}

\item{resample_fn}{A character string specifying the resampling method
(used with \code{"SISR"} or \code{"SISAR"}).
Options include:
\describe{
  \item{"stratified"}{(default) Stratified resampling.}
  \item{"systematic"}{Systematic resampling.}
  \item{"multinomial"}{Multinomial resampling.}
}}

\item{threshold}{A numeric value specifying the ESS threshold for triggering
resampling in the \code{"SISR"} or \code{"SISAR"} algorithm.
If not provided, it defaults to \code{n / 2}.}

\item{return_particles}{A logical value indicating whether to return the full
particle history.
Defaults to \code{TRUE}.}

\item{...}{Additional arguments passed to \code{init_fn},
\code{transition_fn}, and \code{likelihood_fn}.}
}
\value{
A list containing:
  \describe{
    \item{state_est}{A numeric vector of estimated states over time,
    computed as the weighted average of particles.}
    \item{ess}{A numeric vector containing the Effective Sample Size (ESS) at
    each time step.}
    \item{algorithm}{A character string indicating the filtering algorithm
    used.}
     \item{weights_history}{(Optional) A matrix of particle weights over time
    (one row per time step), returned if \code{return_particles} is
    \code{TRUE}.}
  }
}
\description{
This function implements a particle filter for estimating the hidden states
in a state space model using sequential Monte Carlo methods. It supports
three variants: Sequential Importance Sampling (SIS), Sequential Importance
Sampling with Resampling (SISR), and SIS with Adaptive Resampling (SISAR).
The latter adapts resampling based on the Effective Sample Size (ESS).
}
\details{
The particle filter is a sequential Monte Carlo method that approximates the
posterior distribution of the state in a state space model. The three
supported algorithms differ in their approach to resampling:
\enumerate{
  \item \strong{SIS:} Particles are propagated and weighted without any
   resampling, which may lead to weight degeneracy over time.
  \item \strong{SISR:} Resampling is performed at every time step to combat
  weight degeneracy.
  \item \strong{SISAR:} Resampling is performed adaptively; particles are
  resampled only when the Effective Sample Size (ESS) falls below a
  specified threshold (defaulting to \code{n / 2}).
}
The Effective Sample Size (ESS) in context of particle filters is defined as
\deqn{ESS = \frac{1}{\sum_{i=1}^n w_i^2},}
where \eqn{w_i} are the normalized weights of the particles.

The default resampling method is stratified resampling, as Douc et al., 2005
showed that it always gives a lower variance compared to
multinomial resampling.
}
\examples{
# Define example functions for initialization, transition, and likelihood.
init_fn <- function(n) rnorm(n, 0, 1)
transition_fn <- function(particles, t) particles + rnorm(length(particles))
likelihood_fn <- function(y, particles, t) dnorm(y, mean = particles, sd = 1)

# Generate some synthetic observations.
y <- cumsum(rnorm(50))

# Run the particle filter using default settings.
result <- particle_filter(y, n = 100, init_fn, transition_fn, likelihood_fn)
plot(result$state_est, type = "l", col = "blue", main = "State Estimates")
}
